import requests
import os

API_KEY = os.environ.get('API_KEY')


def get_coordinates(location):
    locations = {
        "Lake District National Park": (54.4609, -3.0886),
        "Corfe Castle": (50.6395, -2.0566),
        "The Cotswolds": (51.8330, -1.8433),
        "Cambridge": (52.2053, 0.1218),
        "Bristol": (51.4545, -2.5879),
        "Oxford": (51.7520, -1.2577),
        "Norwich": (52.6309, 1.2974),
        "Stonehenge": (51.1789, -1.8262),
        "Watergate Bay": (50.4429, -5.0553),
        "Birmingham": (52.4862, -1.8904)
    }

    return locations.get(location)


def get_weather_data(latitude, longitude):
    url = f"http://api.openweathermap.org/data/2.5/forecast/daily?lat={latitude}&lon={longitude}&cnt=7&appid={API_KEY}&units=metric"
    response = requests.get(url)
    data = response.json()
    return data


def lambda_handler(event, context):
    # Extract user input from the Lex event
    location = event['currentIntent']['slots']['Location']

    # Retrieve coordinates for the selected location
    coordinates = get_coordinates(location)
    if coordinates:
        # Get the 7-day forecast data
        data = get_weather_data(*coordinates)
        forecast = data['list']

        # Prepare the response message
        response_message = f"7-day forecast for {location}: \n"
        for day in forecast:
            date = day['dt']
            temperature = day['temp']['day']
            description = day['weather'][0]['description']
            response_message += f"Date: {date}, Temperature: {temperature}Â°C, Description: {description} \n"

    else:
        response_message = "Invalid location"

    # Return the response to Lex
    response = {
        "dialogAction": {
            "type": "Close",
            "fulfillmentState": "Fulfilled",
            "message": {
                "contentType": "PlainText",
                "content": response_message
            }
        }
    }

    return response
